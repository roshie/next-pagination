import Head from 'next/head'
import styles from '../styles/Home.module.css'
import Link from 'next/link'

// Number of rows per page
const rowsPerPage = 10

// '/' route handler function
const index = ({ comments, page, totalRecords }: { comments: any, page: number, totalRecords: number }) => {

  const threeTiles: boolean = totalRecords / rowsPerPage > 2

  // A function to return pagination buttons
  const getPaginationButtons = (offset: number) => {

    const getClassName = (num: number) => num === 0 ? styles.active : styles.box
    const getHref = (num: number): string => num === 0 ? "/" : "/?page=" + (Number(page) + Number(num))


    const isFirstPage = (): boolean => (Number(page) === 1) ? true : false
    const isLastPage = (): boolean => (Number(page) === Number(totalRecords / rowsPerPage)) ? true : false

    return (
      <>
        <Link href={isFirstPage() ? "/" : "/?page=" + (Number(page) - 1)}>
          <div className={isFirstPage() ? styles.disabled : styles.box}>❮</div>
        </Link>
        <Link href={getHref(offset)}>
          <div className={getClassName(offset)}>
            {Number(page) + Number(offset)}
          </div>
        </Link>
        <Link href={getHref((Number(offset) + 1))}>
          <div className={getClassName(Number(offset) + 1)}>
            {Number(page) + Number(offset) + 1}
          </div>
        </Link>

        {threeTiles &&
          <Link href={getHref(Number(offset) + 2)}>
            <div className={getClassName(Number(offset) + 2)}>
              {Number(page) + Number(offset) + 2}
            </div>
          </Link>
        }
        <Link href={isLastPage() ? window.location.href : "/?page=" + (Number(page) + 1)}>
          <div className={isLastPage() ? styles.disabled : styles.box}>❯</div>
        </Link>
      </>

    );
  }

  return (
    <div className={styles.container}>

      {/* HTML HEAD */}
      <Head>
        <title>Pagination</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>

        {/* Title */}
        <h1 className={styles.title}>
          Pagination.
        </h1>
        <p>
          Uses <a href="https://jsonplaceholder.typicode.com/">JSONPlaceholder</a>
        </p>

        {/* Pagination Buttons */}
        {totalRecords / rowsPerPage > 1 &&

          <div className={styles.pageButtons}>

            {Number(page) === 1 ?

              getPaginationButtons(0)

              : (

                Number(page) === totalRecords / rowsPerPage ?

                  getPaginationButtons(threeTiles ? -2 : -1)
                  :
                  getPaginationButtons(-1)
              )
            }
          </div>
        }

        {/* Content Table */}
        <table className={styles.tableWrapper}>
          {comments.map((comment: { title: string; body: string; userId: number; id: number }) => {
            return (
              <div className={styles.row}>
                <tr style={{ display: 'flex' }}>
                  <td style={{ color: '#93ffd7' }}> Comment #{comment.id} </td>
                </tr>
                <tr style={{ display: 'flex' }}>
                  <td style={{ fontWeight: 'bolder' }}> {comment.title} </td>
                </tr>
                <tr>
                  <td> {comment.body} </td>
                </tr>
              </div>);
          })}
        </table>
      </main>
    </div>
  )
}


export async function getServerSideProps({ query }: { query: any }): Promise<any> {

  // If the query 'page' doesn't exists
  const page = 'page' in query ? query.page : 1

  // Fetch Data from API
  const { comments, totalRecords } = await (await fetch(`http://localhost:3000/api/users?rows=${rowsPerPage}&page=${page}`)).json();

  // return them as props
  return {
    props: {
      comments: comments ? comments : {},
      page: page,
      totalRecords: totalRecords,
    }
  };
}


export default index
